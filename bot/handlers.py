import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from db.database import DB
from utils.pdf_parser import parse_pdf
from utils.fraud_check import calculate_reliability

db = DB()
CREDIT_AMOUNT, CREDIT_TERM = range(2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤", "–û–±—â–∞—è —Å—É–º–º–∞"],
        ["–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏", "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"]
    ]
    await update.message.reply_text(
        "üîê –ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ—Ç *–î–∞—Ä—Ö–∞–Ω–∞*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode="Markdown"
    )

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    transactions = db.get_transactions(user_id)
    response = "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:*\n" + "\n".join(
        [f"‚Ä¢ {t['date']} - {t['amount']} KGS ({t['recipient']})" 
         for t in transactions]
    ) if transactions else "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    await update.message.reply_text(response, parse_mode="Markdown")

async def total_sum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    total = db.get_total_sum(user_id)
    await update.message.reply_text(f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞:* {total:.2f} KGS", parse_mode="Markdown")

async def reliability(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    transactions = db.get_transactions(user_id)
    rating = calculate_reliability(transactions)
    await update.message.reply_text(
        f"üõ°Ô∏è *–†–µ–π—Ç–∏–Ω–≥ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏:* {rating}%\n"
        "–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n- –ß–µ–∫ –æ—Ç –î–∞—Ä—Ö–∞–Ω–∞ ‚úîÔ∏è\n- –°—É–º–º–∞ > 0 ‚úîÔ∏è\n- –î–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–µ—Å—è—Ü–∞ ‚úîÔ∏è",
        parse_mode="Markdown"
    )

async def pdf_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file = await update.message.document.get_file()
    file_path = f"temp_{user_id}.pdf"
    
    try:
        await file.download_to_drive(file_path)
        parsed_data = parse_pdf(file_path)
        
        if not parsed_data:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫–∞!")
            return
        
        if "–¥–∞—Ä—Ö–∞–Ω" not in parsed_data["recipient"].lower():
            await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ —á–µ–∫–∏ –æ—Ç –î–∞—Ä—Ö–∞–Ω–∞!")
            return
        
        if db.is_duplicate(parsed_data["serial"], parsed_data["serial"]):
            await update.message.reply_text("‚ö†Ô∏è –ß–µ–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            return
        
        db.add_transfer(
            user_id,
            parsed_data["serial"],
            parsed_data["serial"],
            parsed_data["amount"],
            parsed_data["recipient"],
            parsed_data["date"]
        )
        await update.message.reply_text("‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if os.path.exists(file_path):
            os.remove(file_path)

async def start_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞:")
    return CREDIT_AMOUNT

async def credit_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        context.user_data["credit_amount"] = amount
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ (–≤ –º–µ—Å—è—Ü–∞—Ö):")
        return CREDIT_TERM
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!")
        return CREDIT_AMOUNT

async def credit_term(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        term = int(update.message.text)
        db.save_credit_application(
            update.effective_user.id,
            context.user_data["credit_amount"],
            term
        )
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        return ConversationHandler.END
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫!")
        return CREDIT_TERM

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END